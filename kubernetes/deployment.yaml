# Copyright 2020 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

# This file configures the port-backend-server application . The frontend serves
# public web traffic.

# The bookshelf frontend replication controller ensures that at least 3
# instances of the bookshelf app are running on the cluster.
# For more info about Pods see:
#   https://kubernetes.io/docs/concepts/workloads/pods/
# For more info about Deployments:
#   https://kubernetes.io/docs/user-guide/deployments/

# [START kubernetes_deployment]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: port-backend-server
  labels:
    app: port-backend-server
spec:
  replicas: 20
  selector:
    matchLabels:
      app: port-backend-server
  template:
    metadata:
      labels:
        app: port-backend-server
    spec:
      containers:
      - name: port-backend-server-app
        # Replace  with your project ID or use `make template`
        image: gcr.io/superb-leaf-313807/port-backend-server
        # This setting makes nodes pull the docker image every time before
        # starting the pod. This is useful when debugging, but should be turned
        # off in production.
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 1500m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 2Gi
        env:
            # [START cloudsql_secrets]
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: cloudsql
                  key: database
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql
                  key: password
            # [END cloudsql_secrets]
        ports:
          - containerPort: 80
            protocol: TCP
        readinessProbe:
          httpGet:
            path: /health/
            port: 80
          initialDelaySeconds: 120
          periodSeconds: 120
          timeoutSeconds: 120

      # [START proxy_container]
      - image: gcr.io/cloudsql-docker/gce-proxy
        name: cloudsql-proxy
#        command: ["/cloud_sql_proxy", "--dir=/cloudsql",
#                   "-instances=<your-cloudsql-connection-string>=tcp:5432",
#                   "-credential_file=/secrets/cloudsql/credentials.json"]
        command: [ "/cloud_sql_proxy", "--dir=/cloudsql",
                   "-instances=superb-leaf-313807:asia-northeast1:port-project=tcp:5432",
                   "-credential_file=/secrets/cloudsql/credentials.json" ]
        volumeMounts:
          - name: cloudsql-oauth-credentials
            mountPath: /secrets/cloudsql
            readOnly: true
          - name: ssl-certs
            mountPath: /etc/ssl/certs
          - name: cloudsql
            mountPath: /cloudsql
      # [END proxy_container]
      # [START volumes]
      volumes:
        - name: cloudsql-oauth-credentials
          secret:
            secretName: cloudsql-oauth-credentials
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs
        - name: cloudsql
          emptyDir: {}
      # [END volumes]
# [END kubernetes_deployment]

---

# [START service]
# The port-backend-server service provides a load-balancing proxy over the port-backend-server app
# pods. By specifying the type as a 'LoadBalancer', Kubernetes Engine will
# create an external HTTP load balancer.
# For more information about Services see:
#   https://kubernetes.io/docs/concepts/services-networking/service/
# For more information about external HTTP load balancing see:
#   https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
apiVersion: v1
kind: Service
metadata:
  name: port-backend-server
  labels:
    app: port-backend-server
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
spec:
  selector:
    app: port-backend-server
  type: NodePort
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
# [END service]
